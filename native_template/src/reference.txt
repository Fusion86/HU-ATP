.cpu cortex-m0
.align 2

.data

lit_0:
  .asciz "Hello World"

.text
.global println_hello_world
.global test_odd_even

@ println hello world
println_hello_world:
  push { r4, r5, r6, lr }
  ldr r0, =lit_0
  bl println
  pop { r4, r5, r6, pc }

@ test_odd_even
test_odd_even:
  push { r4, r5, r6, lr }
  mov r0, #5
  bl even
  bl print_integer
  pop { r4, r5, r6, pc }

odd:
  push { lr }
  mov r0, r4 @ Load arg0 into r0
  mov r1, #0
  beq odd_cond_true
odd_cond_false:
  b odd_cond_end

odd_cond_true:
  mov r0, #0 @ Set return variable to false
  pop { pc } @ return
  @ b cond_end @ Only add this when not returning

odd_cond_end:
  mov r0, r4 @ Load arg0 into r0
  sub r0, r0, #1 @ Remove 1 from r0
  bl even @ Call even function
  pop { pc } @ Return


even:
  push { lr }
  mov r0, r4 @ Load arg0 into r0
  mov r1, #0
  beq even_cond_true
even_cond_false:
  b even_cond_end

even_cond_true:
  mov r0, #1 @ Set return variable to true
  pop { pc } @ return
  @ b cond_end @ Only add this when not returning

even_cond_end:
  mov r0, r4 @ Load arg0 into r0
  sub r0, r0, #1 @ Remove 1 from r0
  bl odd @ Call even function
  pop { pc }
